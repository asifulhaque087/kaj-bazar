# docker compose up -d redis redis-commander mongodb auth-mysql postgres rabbitmq
# version: '3.9'

name: kaj-bazar-dev

services:
  redis:
    container_name: redis_container
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --loglevel warning
    # volumes:
    #   - ./docker-volumes/cache:/data

  # redis-commander:
  #   container_name: redis-commander
  #   image: ghcr.io/joeferner/redis-commander:latest
  #   restart: always
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     - REDIS_HOSTS=local:redis_container:6379

  mongodb:
    container_name: mongodb_container
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017
    # volumes:
    #   - ./docker-volumes/data:/data/db

  # auth-mysql:
  #   container_name: auth_mysql_container
  #   image: mysql:latest
  #   restart: always
  #   environment:
  #     - MYSQL_USER=auth
  #     - MYSQL_DATABASE=auth_db
  #     - MYSQL_ROOT_PASSWORD=api
  #     - MYSQL_PASSWORD=api
  #   ports:
  #     - "3306:3306"
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-papi"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  auth-db:
    container_name: auth_postgres_container # FIX: Changed from review_postgres_container
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=auth
      - POSTGRES_PASSWORD=api
      - POSTGRES_DB=auths

  review-postgres:
    container_name: review_postgres_container
    # image: postgres:14.18-alpine3.22
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=review
      - POSTGRES_PASSWORD=api
      - POSTGRES_DB=reviews
    # ports:
    # - "5432:5432"
    # volumes:
    #   - ./docker-volumes/postgres:/var/lib/postgresql

  user-postgres:
    container_name: user_postgres_container # FIX: Changed from review_postgres_container
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=api
      - POSTGRES_DB=users

  gig-postgres:
    container_name: gig_postgres_container
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=gig
      - POSTGRES_PASSWORD=api
      - POSTGRES_DB=gigs

  chat-postgres:
    container_name: chat_postgres_container
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=chat
      - POSTGRES_PASSWORD=api
      - POSTGRES_DB=chats

  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:3.13-rc-management-alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=kaj_bazar
      - RABBITMQ_DEFAULT_PASS=kaj_bazarpass
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
  # ==================================== Application==============================

  client:
    container_name: client_container
    build:
      context: client
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 3000:3000
    environment:
      - VITE_NODE_ENV=${VITE_NODE_ENV}
      - VITE_BASE_ENDPOINT=${VITE_BASE_ENDPOINT}
      - VITE_CLIENT_ENDPOINT=${VITE_CLIENT_ENDPOINT}
      - VITE_STRIPE_KEY=${VITE_STRIPE_KEY}
      - VITE_ELASTIC_APM_SERVER=${VITE_ELASTIC_APM_SERVER}
    volumes:
      - ./client:/home/app
      - /home/app/node_modules
    depends_on:
      - gateway

  gateway:
    container_name: gateway_container
    build:
      context: 1-gateway-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4000:4000
    environment:
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - SECRET_KEY_ONE=${SECRET_KEY_ONE}
      - SECRET_KEY_TWO=${SECRET_KEY_TWO}
      - CLIENT_URL=${CLIENT_URL}
      - AUTH_BASE_URL=${AUTH_BASE_URL}
      - USERS_BASE_URL=${USERS_BASE_URL}
      - GIG_BASE_URL=${GIG_BASE_URL}
      - CHAT_BASE_URL=${CHAT_BASE_URL}
      - ORDER_BASE_URL=${ORDER_BASE_URL}
      - REVIEW_BASE_URL=${REVIEW_BASE_URL}
      - REDIS_HOST=${REDIS_HOST}
    volumes:
      - ./1-gateway-service:/home/app
      - /home/app/node_modules
    depends_on:
      - redis
      - chats # FIX: Changed from chat
      - orders # FIX: Changed from order

  email: # FIX: Changed from notification
    container_name: email_container # FIX: Changed from notification_container
    build:
      context: 2-email-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4001:4001
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - NODE_ENV=${NODE_ENV}
      - CLIENT_URL=${CLIENT_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - SENDER_EMAIL=${SENDER_EMAIL}
      - SENDER_EMAIL_PASSWORD=${SENDER_EMAIL_PASSWORD}
    volumes:
      - ./2-email-service:/home/app
      - /home/app/node_modules
    depends_on:
      rabbitmq:
        condition: service_healthy

  auth:
    container_name: auth_container
    build:
      context: 3-auth-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4002:4002
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - CLIENT_URL=${CLIENT_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - DATABASE_URL=${AUTH_DB_URL}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    volumes:
      - ./3-auth-service:/home/app
      - /home/app/node_modules
    depends_on:
      auth-db:
        # condition: service_healthy
        condition: service_started
      rabbitmq:
        condition: service_healthy

  users:
    container_name: users_container
    build:
      context: 4-users-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4003:4003
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${USERS_DB_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - REDIS_HOST=${REDIS_HOST}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    volumes:
      - ./4-users-service:/home/app
      - /home/app/node_modules
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  gigs: # FIX: Changed from gig
    container_name: gigs_container # FIX: Changed from gig_container
    build:
      context: 5-gigs-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4004:4004
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${GIGS_DB_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - REDIS_HOST=${REDIS_HOST}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    volumes:
      - ./5-gigs-service:/home/app
      - /home/app/node_modules
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  chats: # FIX: Changed from chat
    container_name: chats_container # FIX: Changed from chat_container
    build:
      context: 6-chats-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4005:4005
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${CHATS_DB_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
      - REDIS_HOST=${REDIS_HOST}
    volumes:
      - ./6-chats-service:/home/app
      - /home/app/node_modules
    depends_on:
      mongodb:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  orders: # FIX: Changed from order
    container_name: orders_container # FIX: Changed from order_container
    build:
      context: 7-orders-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4006:4006
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - CLIENT_URL=${CLIENT_URL}
      - DATABASE_URL=${ORDERS_DB_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    volumes:
      - ./7-orders-service:/home/app
      - /home/app/node_modules
    depends_on:
      mongodb:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  reviews: # FIX: Changed from review
    container_name: reviews_container # FIX: Changed from review_container
    build:
      context: 8-reviews-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4007:4007
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - DATABASE_HOST=${REVIEW_DB_HOST}
      - DATABASE_USER=${REVIEW_DB_USER}
      - DATABASE_PASSWORD=${REVIEW_DB_PASSWORD}
      - DATABASE_NAME=${REVIEW_DB_NAME}
      - CLUSTER_TYPE=${REVIEW_DB_CLUSTER_TYPE}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
    volumes:
      - ./8-reviews-service:/home/app
      - /home/app/node_modules
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  # Studios

  auth-studio:
    container_name: auth_studio_container
    build:
      context: 3-auth-service
      dockerfile: Dockerfile.studio
    restart: always
    ports:
      # - 4984:4984
      - 4983:4983

    environment:
      - DATABASE_URL=${AUTH_DB_URL}

    profiles: ["exclude"]

    volumes:
      - ./3-auth-service:/home/app

    depends_on:
      auth-db:
        condition: service_started
        # condition: service_healthy
      auth:
        condition: service_started

  user-studio:
    container_name: users_studio_container # FIX: Changed from user_studio_container
    build:
      context: 4-users-service
      dockerfile: Dockerfile.studio
    restart: always
    ports:
      - 4984:4984
    environment:
      - DATABASE_URL=${USERS_DB_URL}
    profiles: ["exclude"]

    volumes:
      - ./4-users-service:/home/app
    depends_on:
      - user-postgres
      - users

  gig-studio:
    container_name: gigs_studio_container
    build:
      context: 5-gigs-service
      dockerfile: Dockerfile.studio
    restart: always
    ports:
      - 4985:4985
    environment:
      - DATABASE_URL=${GIGS_DB_URL}
    profiles: ["exclude"]

    volumes:
      - ./5-gigs-service:/home/app
    depends_on:
      - gig-postgres
      - gigs

  chat-studio:
    container_name: chats_studio_container
    build:
      context: 6-chats-service
      dockerfile: Dockerfile.studio
    restart: always
    ports:
      - 4986:4986
    environment:
      - DATABASE_URL=${CHATS_DB_URL}
    profiles: ["exclude"]

    volumes:
      - ./6-chats-service:/home/app
    depends_on:
      - chat-postgres
      - chats
