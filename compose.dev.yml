name: kaj-bazar-dev

services:
  # ==================================== Infrastructure ==============================
  redis:
    container_name: redis_container
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --loglevel warning
    # No user mapping needed for standard infra services

  auth-db:
    container_name: auth_postgres_container
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=${PG_DB_USER}
      - POSTGRES_PASSWORD=${PG_DB_PWD}
      - POSTGRES_DB=${PG_DB_NAME}

  user-postgres:
    container_name: user_postgres_container
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=${PG_DB_USER}
      - POSTGRES_PASSWORD=${PG_DB_PWD}
      - POSTGRES_DB=${PG_DB_NAME}

  gig-postgres:
    container_name: gig_postgres_container
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=${PG_DB_USER}
      - POSTGRES_PASSWORD=${PG_DB_PWD}
      - POSTGRES_DB=${PG_DB_NAME}

  chat-postgres:
    container_name: chat_postgres_container
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=${PG_DB_USER}
      - POSTGRES_PASSWORD=${PG_DB_PWD}
      - POSTGRES_DB=${PG_DB_NAME}

  order-db:
    container_name: order_postgres_container
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=${PG_DB_USER}
      - POSTGRES_PASSWORD=${PG_DB_PWD}
      - POSTGRES_DB=${PG_DB_NAME}

  review-db:
    container_name: review_postgres_container
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=${PG_DB_USER}
      - POSTGRES_PASSWORD=${PG_DB_PWD}
      - POSTGRES_DB=${PG_DB_NAME}

  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:3.13-rc-management-alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=kaj_bazar
      - RABBITMQ_DEFAULT_PASS=kaj_bazarpass
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    # No user mapping needed for standard infra services

  # ==================================== Application Services ==============================

  client:
    container_name: client_container
    build:
      context: client
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 3000:3000
    environment:
      - VITE_NODE_ENV=${VITE_NODE_ENV}
      - VITE_BASE_ENDPOINT=${VITE_BASE_ENDPOINT}
      - VITE_CLIENT_ENDPOINT=${VITE_CLIENT_ENDPOINT}
      - VITE_STRIPE_KEY=${VITE_STRIPE_KEY}
      - VITE_ELASTIC_APM_SERVER=${VITE_ELASTIC_APM_SERVER}
    volumes:
      - ./client:/home/app
      - /home/app/node_modules
    depends_on:
      - gateway
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  gateway:
    container_name: gateway_container
    build:
      context: 1-gateway-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4000:4000
    environment:
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - SECRET_KEY_ONE=${SECRET_KEY_ONE}
      - SECRET_KEY_TWO=${SECRET_KEY_TWO}
      - CLIENT_URL=${CLIENT_URL}
      - AUTH_BASE_URL=${AUTH_BASE_URL}
      - USER_BASE_URL=${USER_BASE_URL}
      - GIG_BASE_URL=${GIG_BASE_URL}
      - CHAT_BASE_URL=${CHAT_BASE_URL}
      - ORDER_BASE_URL=${ORDER_BASE_URL}
      - REVIEW_BASE_URL=${REVIEW_BASE_URL}
      - REDIS_HOST=${REDIS_HOST}
    volumes:
      - ./1-gateway-service:/home/app
      - /home/app/node_modules
    depends_on:
      - redis
      - chats
      - orders
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  email:
    container_name: email_container
    build:
      context: 2-email-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4001:4001
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - NODE_ENV=${NODE_ENV}
      - CLIENT_URL=${CLIENT_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - SENDER_EMAIL=${SENDER_EMAIL}
      - SENDER_EMAIL_PASSWORD=${SENDER_EMAIL_PASSWORD}
    volumes:
      - ./2-email-service:/home/app
      - /home/app/node_modules
    depends_on:
      rabbitmq:
        condition: service_healthy
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  auth:
    container_name: auth_container
    build:
      context: 3-auth-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4002:4002
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - CLIENT_URL=${CLIENT_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - DATABASE_URL=${AUTH_DB_URL}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    volumes:
      - ./3-auth-service:/home/app
      - /home/app/node_modules
    depends_on:
      auth-db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  users:
    container_name: users_container
    build:
      context: 4-users-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4003:4003
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${USER_DB_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - REDIS_HOST=${REDIS_HOST}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    volumes:
      - ./4-users-service:/home/app
      - /home/app/node_modules
    depends_on:
      user-postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  gigs:
    container_name: gigs_container
    build:
      context: 5-gigs-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4004:4004
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${GIG_DB_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - REDIS_HOST=${REDIS_HOST}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    volumes:
      - ./5-gigs-service:/home/app
      - /home/app/node_modules
    depends_on:
      gig-postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  chats:
    container_name: chats_container
    build:
      context: 6-chats-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4005:4005
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${CHAT_DB_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
      - REDIS_HOST=${REDIS_HOST}
    volumes:
      - ./6-chats-service:/home/app
      - /home/app/node_modules
    depends_on:
      chat-postgres:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  orders:
    container_name: orders_container
    build:
      context: 7-orders-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4006:4006
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - CLIENT_URL=${CLIENT_URL}
      - DATABASE_URL=${ORDER_DB_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    volumes:
      - ./7-orders-service:/home/app
      - /home/app/node_modules
    depends_on:
      order-db:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  reviews:
    container_name: reviews_container
    build:
      context: 8-reviews-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4007:4007
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - DATABASE_URL=${REVIEW_DB_URL}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
    volumes:
      - ./8-reviews-service:/home/app
      - /home/app/node_modules
    depends_on:
      review-db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  # ==================================== Studio Services ==============================

  auth-studio:
    container_name: auth_studio_container
    build:
      context: 3-auth-service
      dockerfile: Dockerfile.studio
    restart: always
    ports:
      - 4983:4983
    environment:
      - DATABASE_URL=${AUTH_DB_URL}
    profiles: ["exclude"]
    volumes:
      - ./3-auth-service:/home/app
    depends_on:
      - auth-db
      - auth
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  user-studio:
    container_name: users_studio_container
    build:
      context: 4-users-service
      dockerfile: Dockerfile.studio
    restart: always
    ports:
      - 4984:4984
    environment:
      - DATABASE_URL=${USER_DB_URL}
    profiles: ["exclude"]
    volumes:
      - ./4-users-service:/home/app
    depends_on:
      - user-postgres
      - users
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  gig-studio:
    container_name: gigs_studio_container
    build:
      context: 5-gigs-service
      dockerfile: Dockerfile.studio
    restart: always
    ports:
      - 4985:4985
    environment:
      - DATABASE_URL=${GIG_DB_URL}
    profiles: ["exclude"]
    volumes:
      - ./5-gigs-service:/home/app
    depends_on:
      - gig-postgres
      - gigs
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  chat-studio:
    container_name: chats_studio_container
    build:
      context: 6-chats-service
      dockerfile: Dockerfile.studio
    restart: always
    ports:
      - 4986:4986
    environment:
      - DATABASE_URL=${CHAT_DB_URL}
    profiles: ["exclude"]
    volumes:
      - ./6-chats-service:/home/app
    depends_on:
      - chat-postgres
      - chats
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  order-studio:
    container_name: orders_studio_container
    build:
      context: 7-orders-service
      dockerfile: Dockerfile.studio
    restart: always
    ports:
      - 4987:4987
    environment:
      - DATABASE_URL=${ORDER_DB_URL}
    profiles: ["exclude"]
    volumes:
      - ./7-orders-service:/home/app
    depends_on:
      - order-db
      - orders
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"

  review-studio:
    container_name: reviews_studio_container
    build:
      context: 8-reviews-service
      dockerfile: Dockerfile.studio
    restart: always
    ports:
      - 4988:4988
    environment:
      - DATABASE_URL=${REVIEW_DB_URL}
    profiles: ["exclude"]
    volumes:
      - ./8-reviews-service:/home/app
    depends_on:
      - review-db
      - reviews
    # ðŸŒŸ ADDED UID/GID MAPPING ðŸŒŸ
    user: "${UID}:${GID}"
