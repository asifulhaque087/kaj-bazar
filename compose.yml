name: kaj-bazar

services:
  redis:
    container_name: redis_container
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --loglevel warning

  redis-commander:
    container_name: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    restart: always
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis_container:6379

  mongodb:
    container_name: mongodb_container
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017

  mysql:
    container_name: mysql_container
    image: mysql:latest
    restart: always
    environment:
      - MYSQL_USER=kaj_bazar
      - MYSQL_DATABASE=kaj_bazar_auth
      - MYSQL_ROOT_PASSWORD=api
      - MYSQL_PASSWORD=api
    ports:
      - "3306:3306"

  postgres:
    container_name: postgres_container
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=kaj_bazar
      - POSTGRES_PASSWORD=api
      - POSTGRES_DB=kaj_bazar_reviews
    ports:
      - "5432:5432"

  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:3.13-rc-management-alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=kaj_bazar
      - RABBITMQ_DEFAULT_PASS=kaj_bazarpass
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
  # ==================================== Application==============================

  client:
    container_name: client_container
    build:
      context: client
      dockerfile: Dockerfile
    restart: always
    ports:
      - 3000:80
    environment:
      - VITE_NODE_ENV=${VITE_NODE_ENV}
      - VITE_BASE_ENDPOINT=${VITE_BASE_ENDPOINT}
      - VITE_CLIENT_ENDPOINT=${VITE_CLIENT_ENDPOINT}
      - VITE_STRIPE_KEY=${VITE_STRIPE_KEY}
      - VITE_ELASTIC_APM_SERVER=${VITE_ELASTIC_APM_SERVER}
    depends_on:
      - gateway

  gateway:
    container_name: gateway_container
    build:
      context: 1-gateway-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - 4000:4000
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - SECRET_KEY_ONE=${SECRET_KEY_ONE}
      - SECRET_KEY_TWO=${SECRET_KEY_TWO}
      - CLIENT_URL=${CLIENT_URL}
      - AUTH_BASE_URL=${AUTH_BASE_URL}
      - USERS_BASE_URL=${USERS_BASE_URL}
      - GIG_BASE_URL=${GIG_BASE_URL}
      - MESSAGE_BASE_URL=${MESSAGE_BASE_URL}
      - ORDER_BASE_URL=${ORDER_BASE_URL}
      - REVIEW_BASE_URL=${REVIEW_BASE_URL}
      - REDIS_HOST=${REDIS_HOST}
    depends_on:
      - chat
      - order

  notifications:
    container_name: notification_container
    build:
      context: 2-notification-service
      dockerfile: Dockerfile
    restart: always
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - NODE_ENV=${NODE_ENV}
      - CLIENT_URL=${CLIENT_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - SENDER_EMAIL=${SENDER_EMAIL}
      - SENDER_EMAIL_PASSWORD=${SENDER_EMAIL_PASSWORD}
    depends_on:
      rabbitmq:
        condition: service_healthy

  auth:
    container_name: auth_container
    build:
      context: 3-auth-service
      dockerfile: Dockerfile
    restart: always
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - CLIENT_URL=${CLIENT_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - MYSQL_DB=${AUTH_DB_URL}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    depends_on:
      mysql:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  users:
    container_name: users_container
    build:
      context: 4-users-service
      dockerfile: Dockerfile
    restart: always
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${USERS_DB_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - REDIS_HOST=${REDIS_HOST}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  gig:
    container_name: gig_container
    build:
      context: 5-gig-service
      dockerfile: Dockerfile
    restart: always
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${GIG_DB_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - REDIS_HOST=${REDIS_HOST}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  chat:
    container_name: chat_container
    build:
      context: 6-chat-service
      dockerfile: Dockerfile
    restart: always
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${CHAT_DB_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  order:
    container_name: order_container
    build:
      context: 7-order-service
      dockerfile: Dockerfile
    restart: always
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - CLIENT_URL=${CLIENT_URL}
      - DATABASE_URL=${ORDER_DB_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  review:
    container_name: review_container
    build:
      context: 8-review-service
      dockerfile: Dockerfile
    restart: always
    environment:
      - ENABLE_APM=${ENABLE_APM}
      - DATABASE_HOST=${REVIEW_DB_HOST}
      - DATABASE_USER=${REVIEW_DB_USER}
      - DATABASE_PASSWORD=${REVIEW_DB_PASSWORD}
      - DATABASE_NAME=${REVIEW_DB_NAME}
      - CLUSTER_TYPE=${REVIEW_DB_CLUSTER_TYPE}
      - GATEWAY_JWT_TOKEN=${GATEWAY_JWT_TOKEN}
      - JWT_TOKEN=${JWT_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - RABBITMQ_ENDPOINT=${RABBITMQ_ENDPOINT}
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
